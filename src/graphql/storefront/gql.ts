/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  mutation addToCart($cartId: ID!, $variantId: ID!) {\n    cartLinesAdd(cartId: $cartId, lines: { merchandiseId: $variantId }) {\n      cart {\n        id\n        checkoutUrl\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.AddToCartDocument,
    "\n  mutation cartCreate($input: CartInput) {\n    cartCreate(input: $input) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          checkoutChargeAmount {\n            currencyCode\n            amount\n          }\n        }\n        lines(first: 100) {\n          edges {\n            node {\n              id\n              quantity\n              merchandise {\n                __typename\n                ... on ProductVariant {\n                  price {\n                    amount\n                    currencyCode\n                  }\n                  title\n                  product {\n                    id\n                    title\n                    handle\n                    featuredImage {\n                      id\n                      url\n                      altText\n                      width\n                      height\n                    }\n                    variants {\n                      edges {\n                        node {\n                          id\n                          title\n                          quantityAvailable\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.CartCreateDocument,
    "\n  query getCartById($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      checkoutUrl\n      cost {\n        checkoutChargeAmount {\n          currencyCode\n          amount\n        }\n      }\n      lines(first: 100) {\n        edges {\n          node {\n            id\n            quantity\n            merchandise {\n              __typename\n              ... on ProductVariant {\n                price {\n                  amount\n                  currencyCode\n                }\n                title\n                product {\n                  id\n                  title\n                  handle\n                  featuredImage {\n                    id\n                    url\n                    altText\n                    width\n                    height\n                  }\n                  variants(first: 100) {\n                    edges {\n                      node {\n                        id\n                        title\n                        quantityAvailable\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCartByIdDocument,
    "\n  mutation updateCart($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.UpdateCartDocument,
    "\n  query productByHandle($handle: String!) {\n    product(handle: $handle) {\n      id\n      title\n      descriptionHtml\n      description\n      publishedAt\n      featuredImage {\n        altText\n        width\n        height\n        url\n      }\n      handle\n      totalInventory\n      tags\n      variants(first: 100) {\n        edges {\n          node {\n            id\n            title\n            quantityAvailable\n            image {\n              url\n              altText\n              width\n              height\n            }\n          }\n        }\n      }\n      priceRange {\n        minVariantPrice {\n          amount\n        }\n      }\n      metafields(identifiers: [{ namespace: \"custom\", key: \"release_date\" }]) {\n        key\n        value\n      }\n      images(first: 100) {\n        edges {\n          node {\n            url\n            altText\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n": types.ProductByHandleDocument,
    "\n  query AllProducts {\n    products(first: 25) {\n      nodes {\n        id\n        title\n        handle\n        updatedAt\n        tags\n        totalInventory\n        featuredImage {\n          url\n          altText\n          width\n          height\n        }\n        images(first: 2) {\n          edges {\n            node {\n              url\n              altText\n              width\n              height\n            }\n          }\n        }\n        priceRange {\n          minVariantPrice {\n            amount\n          }\n        }\n        variants(first: 20) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        metafields(\n          identifiers: [\n            { namespace: \"custom\", key: \"release_date\" }\n          ]\n        ) {\n          key\n          value\n        }\n      }\n    }\n  }\n": types.AllProductsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addToCart($cartId: ID!, $variantId: ID!) {\n    cartLinesAdd(cartId: $cartId, lines: { merchandiseId: $variantId }) {\n      cart {\n        id\n        checkoutUrl\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): typeof import('./graphql').AddToCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation cartCreate($input: CartInput) {\n    cartCreate(input: $input) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          checkoutChargeAmount {\n            currencyCode\n            amount\n          }\n        }\n        lines(first: 100) {\n          edges {\n            node {\n              id\n              quantity\n              merchandise {\n                __typename\n                ... on ProductVariant {\n                  price {\n                    amount\n                    currencyCode\n                  }\n                  title\n                  product {\n                    id\n                    title\n                    handle\n                    featuredImage {\n                      id\n                      url\n                      altText\n                      width\n                      height\n                    }\n                    variants {\n                      edges {\n                        node {\n                          id\n                          title\n                          quantityAvailable\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): typeof import('./graphql').CartCreateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCartById($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      checkoutUrl\n      cost {\n        checkoutChargeAmount {\n          currencyCode\n          amount\n        }\n      }\n      lines(first: 100) {\n        edges {\n          node {\n            id\n            quantity\n            merchandise {\n              __typename\n              ... on ProductVariant {\n                price {\n                  amount\n                  currencyCode\n                }\n                title\n                product {\n                  id\n                  title\n                  handle\n                  featuredImage {\n                    id\n                    url\n                    altText\n                    width\n                    height\n                  }\n                  variants(first: 100) {\n                    edges {\n                      node {\n                        id\n                        title\n                        quantityAvailable\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetCartByIdDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCart($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productByHandle($handle: String!) {\n    product(handle: $handle) {\n      id\n      title\n      descriptionHtml\n      description\n      publishedAt\n      featuredImage {\n        altText\n        width\n        height\n        url\n      }\n      handle\n      totalInventory\n      tags\n      variants(first: 100) {\n        edges {\n          node {\n            id\n            title\n            quantityAvailable\n            image {\n              url\n              altText\n              width\n              height\n            }\n          }\n        }\n      }\n      priceRange {\n        minVariantPrice {\n          amount\n        }\n      }\n      metafields(identifiers: [{ namespace: \"custom\", key: \"release_date\" }]) {\n        key\n        value\n      }\n      images(first: 100) {\n        edges {\n          node {\n            url\n            altText\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ProductByHandleDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllProducts {\n    products(first: 25) {\n      nodes {\n        id\n        title\n        handle\n        updatedAt\n        tags\n        totalInventory\n        featuredImage {\n          url\n          altText\n          width\n          height\n        }\n        images(first: 2) {\n          edges {\n            node {\n              url\n              altText\n              width\n              height\n            }\n          }\n        }\n        priceRange {\n          minVariantPrice {\n            amount\n          }\n        }\n        variants(first: 20) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        metafields(\n          identifiers: [\n            { namespace: \"custom\", key: \"release_date\" }\n          ]\n        ) {\n          key\n          value\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AllProductsDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
